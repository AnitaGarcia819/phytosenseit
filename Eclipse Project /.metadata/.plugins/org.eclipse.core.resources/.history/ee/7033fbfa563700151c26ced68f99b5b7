package org.opencv.samples.tutorial3;

// Template Matching 
// *****************************************
import org.opencv.core.Core;
import org.opencv.core.Core.MinMaxLocResult;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfPoint;
import org.opencv.core.Point;
import org.opencv.core.Scalar;
import org.opencv.imgcodecs.*;

// *****************************************
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.ListIterator;

import org.opencv.android.BaseLoaderCallback;
import org.opencv.android.CameraBridgeViewBase.CvCameraViewFrame;
import org.opencv.android.LoaderCallbackInterface;
import org.opencv.android.OpenCVLoader;
import org.opencv.android.Utils;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.imgproc.Imgproc;
import org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2;






import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Rect;
import android.hardware.Camera.Size;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.SubMenu;
import android.view.SurfaceView;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Toast;

import org.opencv.imgcodecs.*;

public class Tutorial3Activity extends Activity implements CvCameraViewListener2, OnTouchListener {

	private Tutorial3View mOpenCvCameraView;
	private List<Size> mResolutionList;
	private MenuItem[] mEffectMenuItems;
	private SubMenu mColorEffectsMenu;
	private MenuItem[] mResolutionMenuItems;
	private SubMenu mResolutionMenu;

	public String fileName;
	// private Mat img;// matrix that will hold image

	private Button mTakePhotoButton;

	/*========TEMPLATE MATCHING MEMBERS======*/
	// Image of photo taken
	Mat img = Imgcodecs.imread(fileName);
	// Templates will be declared below

	// Bitmap to allow for image processing on images
	Bitmap imgBMap;
	Bitmap templBMap;

	/* Your code to template match goes here */
	public int result_index = 0;
	public String[] diseasNames = new String[147];
	public boolean[] states = new boolean[147];
	public String[] diseasesDetected = new String[147];
	public double[] resultMaxVals = new double[147];

	// Tag name for logs
	private static final String TAG = "TemplateMatchTest: ";
	// Arrays that will store the max value and location of each template
	// match that is found.
	// Index 0 & 1: Healthy Apple
	// Index 1 & 2: Apple Blister Spot
	// Index 3 & 4: Apple Bitter Rot
	// Index 5 & 6: Apple Scab
	public double[] templateMaxValues = new double[8];

	// Index that will be used with 'maxVaules' and 'locations' arrays
	public int template_index = 0;

	//Max value 
	public MinMaxLocResult mmr;

	// Matrix for the result max values of the template matching
	public Mat result, templ;

	// Used to locate the start drawing point on image
	public Point matchLoc;

	/*========END======*/

	private BaseLoaderCallback mLoaderCallback = new BaseLoaderCallback(this) {
		@Override
		public void onManagerConnected(int status) {
			switch (status) {
			case LoaderCallbackInterface.SUCCESS:
			{
				Log.i(TAG, "OpenCV loaded successfully");
				mOpenCvCameraView.enableView();

				// mOpenCvCameraView.setOnTouchListener(Tutorial3Activity.this);
			} break;
			default:
			{
				super.onManagerConnected(status);
			} break;
			}
		}
	};

	public Tutorial3Activity() {
		Log.i(TAG, "Instantiated new " + this.getClass());
	}

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		Log.i(TAG, "called onCreate");
		super.onCreate(savedInstanceState);
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

		setContentView(R.layout.tutorial3_surface_view);

		mOpenCvCameraView = (Tutorial3View) findViewById(R.id.tutorial3_activity_java_surface_view);

		mOpenCvCameraView.setVisibility(SurfaceView.VISIBLE);


		//  mOpenCvCameraView.setCvCameraViewListener(this);

		mTakePhotoButton = (Button) findViewById(R.id.button1);
		mTakePhotoButton.setOnClickListener(new View.OnClickListener() {

			@SuppressLint("SimpleDateFormat")
			@Override
			public void onClick(View v) {

				//Takes and saves the photo
				takePicture();

				// Sets up a delay  (5s = 5000ms)
				final Handler handler = new Handler();
				handler.postDelayed(new Runnable() {
					@Override
					public void run() {
						// Calls your algorithm after
						matchTemplate();
						//makeBinary();
						// Sets 'Take Photo' Button Invisibile 
						mTakePhotoButton.setVisibility(Button.GONE);
					}
				}, 5000);
			}
		});
	}

	@Override
	public void onPause()
	{
		super.onPause();
		if (mOpenCvCameraView != null)
			mOpenCvCameraView.disableView();
	}

	@Override
	public void onResume()
	{
		super.onResume();
		if (!OpenCVLoader.initDebug()) {
			Log.d(TAG, "Internal OpenCV library not found. Using OpenCV Manager for initialization");
			OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_3_0_0, this, mLoaderCallback);
		} else {
			Log.d(TAG, "OpenCV library found inside package. Using it!");
			mLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);
		}
	}

	public void onDestroy() {
		super.onDestroy();
		if (mOpenCvCameraView != null)
			mOpenCvCameraView.disableView();
	}

	public void onCameraViewStarted(int width, int height) {


	}

	public void onCameraViewStopped() {
	}

	public Mat onCameraFrame(CvCameraViewFrame inputFrame) {
		Log.e("onCameraFrame", "Inside");
		Mat mRgba = inputFrame.rgba();

		/* Under construction to display rectangle on camera view*/
		Imgproc.rectangle(mRgba, new Point(mRgba.cols()/3, mRgba.rows()/3), new Point(mRgba.cols()/2, mRgba.rows()/2), new Scalar(255,0,0,0), 3);
		//Imgproc.putText(mRgba, "====TEST===", new Point(100, 500), 3, 1, new Scalar(255,0,0,0), 2);	

		return mRgba;
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		List<String> effects = mOpenCvCameraView.getEffectList();

		if (effects == null) {
			Log.e(TAG, "Color effects are not supported by device!");
			return true;
		}

		mColorEffectsMenu = menu.addSubMenu("Color Effect");
		mEffectMenuItems = new MenuItem[effects.size()];

		int idx = 0;
		ListIterator<String> effectItr = effects.listIterator();
		while(effectItr.hasNext()) {
			String element = effectItr.next();
			mEffectMenuItems[idx] = mColorEffectsMenu.add(1, idx, Menu.NONE, element);
			idx++;
		}

		mResolutionMenu = menu.addSubMenu("Resolution");
		mResolutionList = mOpenCvCameraView.getResolutionList();
		mResolutionMenuItems = new MenuItem[mResolutionList.size()];

		ListIterator<Size> resolutionItr = mResolutionList.listIterator();
		idx = 0;
		while(resolutionItr.hasNext()) {
			Size element = resolutionItr.next();
			mResolutionMenuItems[idx] = mResolutionMenu.add(2, idx, Menu.NONE,
					Integer.valueOf(element.width).toString() + "x" + Integer.valueOf(element.height).toString());
			idx++;
		}
		return true;
	}

	public boolean onOptionsItemSelected(MenuItem item) {
		Log.i(TAG, "called onOptionsItemSelected; selected item: " + item);
		if (item.getGroupId() == 1)
		{
			mOpenCvCameraView.setEffect((String) item.getTitle());
			Toast.makeText(this, mOpenCvCameraView.getEffect(), Toast.LENGTH_SHORT).show();
		}
		else if (item.getGroupId() == 2)
		{
			int id = item.getItemId();
			Size resolution = mResolutionList.get(id);
			mOpenCvCameraView.setResolution(resolution);
			resolution = mOpenCvCameraView.getResolution();
			String caption = Integer.valueOf(resolution.width).toString() + "x" + Integer.valueOf(resolution.height).toString();
			Toast.makeText(this, caption, Toast.LENGTH_SHORT).show();
		}
		return true;
	}

	@SuppressLint("SimpleDateFormat")
	@Override
	public boolean onTouch(View v, MotionEvent event) {
		Log.i(TAG,"onTouch event");
		/*
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
        String currentDateandTime = sdf.format(new Date());
        fileName = Environment.getExternalStorageDirectory().getPath() +
                               "/sample_picture_" + currentDateandTime + ".jpg";
        mOpenCvCameraView.takePicture(fileName);
        Toast.makeText(this, fileName + " saved", Toast.LENGTH_SHORT).show();
		 */
		return false;

	}

	// You can use this function as an example 

	public void  makeBinary(){
		Mat img = Imgcodecs.imread(fileName);

		Log.i("MAKE BINARY", fileName);
		Log.i("MAKE BINARY: ","Width:"+  img.width() + " Height: " + img.height());

		Imgproc.cvtColor(img, img, Imgproc.COLOR_RGB2GRAY); 
		Imgproc.adaptiveThreshold(img, img,255, Imgproc.ADAPTIVE_THRESH_GAUSSIAN_C, Imgproc.THRESH_BINARY, 21, 4);
		Bitmap bitmap = Bitmap.createBitmap(img.cols(), img.rows(), Bitmap.Config.ARGB_8888);
		Utils.matToBitmap(img, bitmap);// convert matrix to
		mOpenCvCameraView.setVisibility(SurfaceView.GONE);
		//Intent iResult = new Intent(getBaseContext(), ResultFound.class);
		// startActivity(iResult);
		ImageView imgV = (ImageView) findViewById(R.id.imageView);
		imgV.setImageBitmap(bitmap);// set image view to 
	}

	public void takePicture(){
		//Takes picture 
		Log.e(TAG,"onTouch event");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
		String currentDateandTime = sdf.format(new Date());
		fileName = Environment.getExternalStorageDirectory().getPath() +
				"/sample_picture_" + currentDateandTime + ".jpg";
		mOpenCvCameraView.takePicture(fileName);
		Log.e("onClick", fileName);

	}

	// Matches every template against the image
	public void matchesTemplatesToImg(){

		// Converts image taken from camera(Mat) into Bitmap
		Log.e("MAT -> BITMAP", "TEST AREA 1");
		// Converts image to gray scale 
		Imgproc.cvtColor(img, img, Imgproc.COLOR_BGR2GRAY);
		// Converts gray scale to color
		//Imgproc.cvtColor(img, img, Imgproc.COLOR_GRAY2RGBA, 4);
		Log.e("MAT -> BITMAP", "TEST AREA 2");
		imgBMap = Bitmap.createBitmap(img.cols(),img.rows(), Bitmap.Config.ARGB_8888);
		Utils.matToBitmap(img, imgBMap);
		Log.e("MAT -> BITMAP", "TEST AREA 3");

		/* Health Apple template */
		// Converts template into Bitmap
		templBMap = BitmapFactory.decodeResource(getResources(), R.drawable.template_healthy4);
		// Create the memory for the image and template matrices
		Mat templ = new Mat(templBMap.getHeight(), templBMap.getWidth(), CvType.CV_8U);
		// Convert bitmaps to matrices
		Utils.bitmapToMat(templBMap, templ); 
		Imgproc.cvtColor(templ, templ, Imgproc.COLOR_RGB2GRAY, 0);

		// Create Matrix for result
		// This will hold all of the matching values
		int result_cols = img.cols() - templ.cols() + 1;
		int result_rows = img.rows() - templ.rows() + 1;
		result = new Mat(result_cols, result_rows, CvType.CV_32FC1);

		// Calls template Matching method 
		detectDisease();


		/* Health Apple template number 2 */
		// Converts template into Bitmap
		templBMap = BitmapFactory.decodeResource(getResources(), R.drawable.template_healthy4);
		// Create the memory for the image and template matrices
		templ = new Mat(templBMap.getHeight(), templBMap.getWidth(), CvType.CV_8U);
		// Convert bitmaps to matrices
		Utils.bitmapToMat(templBMap, templ); 
		// Pre-processing on template image 
		Imgproc.cvtColor(templ, templ, Imgproc.COLOR_RGB2GRAY, 0);

		// Result for new template
		result_cols = img.cols() - templ.cols() + 1;
		result_rows = img.rows() - templ.rows() + 1;
		result = new Mat(result_cols, result_rows, CvType.CV_32FC1);
		// Calls template Matching method 
		detectDisease();

		/*Apple Bitter rot template 1*/
		// Converts template into Bitmap
		templBMap = BitmapFactory.decodeResource(getResources(), R.drawable.template_bitterrot);
		// Create the memory for the image and template matrices
		templ = new Mat(templBMap.getHeight(), templBMap.getWidth(), CvType.CV_8U);
		// Convert bitmaps to matrices
		Utils.bitmapToMat(templBMap, templ); 
		Imgproc.cvtColor(templ, templ, Imgproc.COLOR_RGB2GRAY, 0);


		// Result for new template
		result_cols = img.cols() - templ.cols() + 1;
		Log.e("RESULT_COLS"," " + result_cols);
		result_rows = img.rows() - templ.rows() + 1;
		result = new Mat(result_cols, result_rows, CvType.CV_32FC1);

		// Calls template Matching method 
		detectDisease();

		/* Apple Bitter rot template 2 */
		// Converts template into Bitmap
		templBMap = BitmapFactory.decodeResource(getResources(), R.drawable.template_bitterrot_2);
		// Create the memory for the image and template matrices
		templ = new Mat(templBMap.getHeight(), templBMap.getWidth(), CvType.CV_8U);
		// Convert bitmaps to matrices
		Utils.bitmapToMat(templBMap, templ); 
		Imgproc.cvtColor(templ, templ, Imgproc.COLOR_RGB2GRAY, 0);

		// Result for new template
		result_cols = img.cols() - templ.cols() + 1;
		result_rows = img.rows() - templ.rows() + 1;
		result = new Mat(result_cols, result_rows, CvType.CV_32FC1);

		// Calls template Matching method 
		detectDisease();

		/* Apple Blister Spot template 1 */
		// Converts template into Bitmap
		templBMap = BitmapFactory.decodeResource(getResources(), R.drawable.template_blisterspot);
		// Create the memory for the image and template matrices
		templ = new Mat(templBMap.getHeight(), templBMap.getWidth(), CvType.CV_8U);
		// Convert bitmaps to matrices
		Utils.bitmapToMat(templBMap, templ); 
		Imgproc.cvtColor(templ, templ, Imgproc.COLOR_RGB2GRAY, 0);

		// Result for new template
		result_cols = img.cols() - templ.cols() + 1;
		result_rows = img.rows() - templ.rows() + 1;
		result = new Mat(result_cols, result_rows, CvType.CV_32FC1);

		// Calls template Matching method 
		detectDisease();

		/* Apple Blister Spot template 2 */
		// Converts template into Bitmap
		templBMap = BitmapFactory.decodeResource(getResources(), R.drawable.template_blisterspot_2);
		// Create the memory for the image and template matrices
		templ = new Mat(templBMap.getHeight(), templBMap.getWidth(), CvType.CV_8U);
		// Convert bitmaps to matrices
		Utils.bitmapToMat(templBMap, templ);
		Imgproc.cvtColor(templ, templ, Imgproc.COLOR_RGB2GRAY, 0);

		// Result for new template
		result_cols = img.cols() - templ.cols() + 1;
		result_rows = img.rows() - templ.rows() + 1;
		result = new Mat(result_cols, result_rows, CvType.CV_32FC1);

		// Calls template Matching method 
		detectDisease();

		/* Apple Scab template 1 */
		// Converts template into Bitmap
		templBMap = BitmapFactory.decodeResource(getResources(), R.drawable.template_scab);
		// Create the memory for the image and template matrices
		templ = new Mat(templBMap.getHeight(), templBMap.getWidth(), CvType.CV_8U); 
		// Convert bitmaps to matrices
		Utils.bitmapToMat(templBMap, templ); 
		Imgproc.cvtColor(templ, templ, Imgproc.COLOR_RGB2GRAY, 0);

		// Result for new template
		result_cols = img.cols() - templ.cols() + 1;
		result_rows = img.rows() - templ.rows() + 1;
		result = new Mat(result_cols, result_rows, CvType.CV_32FC1);

		// Calls template Matching method 
		detectDisease();

		/* Apple Scab template 2 */
		// Converts template into Bitmap
		templBMap = BitmapFactory.decodeResource(getResources(), R.drawable.template_scab_2);
		// Create the memory for the image and template matrices
		templ = new Mat(templBMap.getHeight(), templBMap.getWidth(), CvType.CV_8U);
		// Convert bitmaps to matrices
		Utils.bitmapToMat(templBMap, templ); 
		Imgproc.cvtColor(templ, templ, Imgproc.COLOR_RGB2GRAY, 0);

		// Result for new template
		result_cols = img.cols() - templ.cols() + 1;
		result_rows = img.rows() - templ.rows() + 1;
		result = new Mat(result_cols, result_rows, CvType.CV_32FC1);

		// Calls template Matching method 
		detectDisease();
		if(template_index == 8)
			template_index = 0;


		identifyDisease();


		mOpenCvCameraView.setVisibility(SurfaceView.GONE);
		ImageView imgV = (ImageView) findViewById(R.id.imageView);
		imgV.setImageBitmap(imgBMap);// set image view to 


	}

	// Matches the template to image and stores best match detected
	public void detectDisease(){
		Imgproc.matchTemplate(img, templ, result, Imgproc.TM_CCOEFF_NORMED);

		// Localizing the best match with minMaxLoc
		mmr = Core.minMaxLoc(result);
		Log.d("*(MAX VALUE) Max Value : ", " " + mmr.maxVal);

		boolean isBlisterSpot = false;
		int counter = 0;
		for(int r = 0; r < result.rows(); r++)
		{
			for (int c = 0; c < result.cols(); c++)
			{
				if((template_index == 4 || template_index == 5)&& result.get(r, c)[0] > .7)
				{	
					counter++;
					isBlisterSpot = true;
				}
			}
		}	
		if ( isBlisterSpot == true)
		{
			if(counter > 2000)
				templateMaxValues[template_index] = mmr.maxVal;
			else
				templateMaxValues[template_index] = 0.0;
		}
		else
			templateMaxValues[template_index] = mmr.maxVal;

		Log.e("Counter ", " " + counter);
		Log.e("Max Val - .1ec", " " + (mmr.maxVal));

		//Stores max values into array

		// Normalize 
		Core.normalize(result, result, 0, 1, Core.NORM_MINMAX, -1,
				new Mat());

		if (Imgproc.TM_CCOEFF == Imgproc.TM_SQDIFF
				|| Imgproc.TM_CCOEFF == Imgproc.TM_SQDIFF_NORMED) {
			matchLoc = mmr.minLoc;

			// Stores Max or Min Location into array 
			// Log.i("(POINT) Min Location (x): ", Double.toString(matchLoc.x));
			// Log.i("(POINT) Min Location (y): ", Double.toString(matchLoc.y));
		}else {

			matchLoc = mmr.maxLoc;
			// Stores Max or Min Location into array 
			//Log.i("(POINT) Max Location (x): ", Double.toString(matchLoc.x));
			//Log.i("(POINT) Max Location (y) ", Double.toString(matchLoc.y));
		}
		// Increments index for 'maxValues' and 'locations' arrays
		template_index++;
	}

	// Looks through all best matches and find the most accurate finding
	// and deems it as the identified disease
	public void identifyDisease(){
		// keeps track of largest value so far
		double largestVal = templateMaxValues[0];

		// Keeps track of index that houses largest value
		int largestValIndex = 0;

		// Loop through max value array
		for(int i = 0; i < templateMaxValues.length; i++)
		{
			if(templateMaxValues[i] > largestVal)
			{
				largestVal = templateMaxValues[i];
				largestValIndex = i;
			}

		}

		// Determine State 
		if(largestValIndex == 0 || largestValIndex == 1)
		{
			// No disease was found 
			// Send intent Extra 0
			// This intent will take you to the 'NoResultFound' Activity
			Intent iNoResult = new Intent(getBaseContext(), HomeActivity.class);
			startActivity(iNoResult);
		}
		// Determine Disease Detected 
		else if(largestValIndex == 2 || largestValIndex == 3)
		{
			// Bitter rot detected
			// Send intent Extra 1
			// This intent will take you to the 'ResultFound' Activity
			Intent iResult = new Intent(getBaseContext(), HomeActivity.class);
			startActivity(iResult);

		}
		else if(largestValIndex == 4 || largestValIndex == 5)
		{
			// Blister Spot detected
			// Send intent Extra 2
			// This intent will take you to the 'ResultFound' Activity
			Intent iResult = new Intent(getBaseContext(), HomeActivity.class);
			startActivity(iResult);
		}
		else {
			// Scab detected 
			// Send intent Extra 2
			// This intent will take you to the 'ResultFound' Activity
			Intent iResult = new Intent(getBaseContext(), HomeActivity.class);
			startActivity(iResult);
		}

		result_index++;	


		/*Intents to result and noresult
		 * 




		 *
		 */
	}

}
